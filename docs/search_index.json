[["index.html", "Psychological Research in R An R Intro for people whose dog regularly ate their statistics homework. About… …this book …the author", " Psychological Research in R An R Intro for people whose dog regularly ate their statistics homework. Anni Tave Overlander 2024-07-23 About… This book is still a work in progress! Most chapters are currently placeholders and will be filled over the next couple of weeks! …this book It’s actually more of a course but book sounds really fancy. Welcome! Chances are, you are a psychology student and either starting to learn R or looking to refresh your memory. Or perhaps you need to look up a specific step that you can never quite remember (or is that just me?). Maybe you also came across this resource by pure chance - lucky you! In any case I am glad you are here and hope you find both what you were and weren’t looking for. This book is based on an in-person introductory R course from the University of Konstanz. I tried my very best to cover all the basics on working with R from the ground up. Following the whole course should enable you to write your very own R Markdown report, taking full advantage of some of the most important and common features of R. That being said, this book is quite opinionated, meaning I included all the lovely things that I like to work with. You might prefer other packages and that is completely okay - I still appreciate you reading my suggestions. As with anything in life, a lot can be learned from other peoples approaches to things. …the author I am Tave and I am currently working on my Ph.D. in Psychological Methods. This online book is a little side project that is quite near and dear to my heart. In my experience, statistics and - goddess forbid - statistics programs can easily induce panic-like states in psychology students. And also in my experience, that can change over the course of one semester tops. Programming in R is a lot less scary than many may think and most of all, it can and should be fun! It is a weird, powerful language and can assist you with many everyday tasks. I hope to alleviate some of the aveRsion over the course of this course and help you see R’s advantages. Please feel free to contact me if you have any questions or comments! You can reach out via e-mail: annika-tave.overlander@uni.kn or you can submit a GitHub issue over at the repository for this book: https://github.com/the-tave/psych_research_in_r. "],["intro-and-installation.html", "Chapter 1 Intro and Installation 1.1 What is R? What is R Studio? 1.2 Basics 1.3 Working with Data Frames 1.4 Installing Packages 1.5 Wrap-Up &amp; Further Resources", " Chapter 1 Intro and Installation 1.1 What is R? What is R Studio? First of all, R is a programming language for statistical and data analysis. Open source \\(\\rightarrow\\) anyone can contribute Use: Base R: functions that R understands without any further instructions Packages: think of them as new tricks that you can teach your R More than anything else, R follows instructions, so we need to learn how to give them 1.1.1 Installing R and R Studio Download &amp; Install the newest R version 4.3.3 (2024-02-29 ucrt) at https://cloud.r-project.org/ Download and install R Studio at https://posit.co/download/rstudio-desktop/ 1.1.2 R Studio R as a language can be used on its own - but that’s no fun. R GUI on its own That’s why we use R Studio as a user interface to run R. Think of it as dipping your fingers in a pot of ink to write versus using a pen and paper - you will still write with the same ink, but the whole process is just nicer. 1.1.3 R Studio Layout R Studio - typical layout 1.1.4 Workflow Instructions or commands through the Console (bottom left tile) or in a Script in the Editor (top left tile). Console: quickly try a command, install a package or to gather information about things like your working directory (we’ll get to that later) These are things that we do maybe once per session but usually don’t need to reproduce. Editor: pretty much everything else Create Scripts where we can save all the code that we write to use and find again 1.1.5 New Script For most things - especially during the learning phase - it makes sense to write a Script in the Editor in order to be able to save and access the work. To do so, simply click the button and choose ‘R Script’. 1.2 Basics 1+2 ## [1] 3 2-3 ## [1] -1 3*4 ## [1] 12 4/3 ## [1] 1.333333 1.2.1 Advanced Math 5^2 # power ## [1] 25 sqrt(64) # square root ## [1] 8 sum(1, 2, 3) # sum ## [1] 6 pi # constant ## [1] 3.141593 1.2.2 Assigning Variables a &lt;- 3 b &lt;- 4 a*b+5 ## [1] 17 R can be used as a calculator to perform basic &amp; advanced math Variables that contain numbers (such as a &amp; b) can be used in their place in a calculation 1.2.3 Variables a &amp; b only contain numbers \\(\\rightarrow\\) called numeric check this property of a variable, e.g. a using the function class(a), which gives us “numeric” as output Usually we don’t just want to work with single values but with data frames or vectors can contain different classes of variables and several values 1.2.4 Vectors c &lt;- c(6, 7, 8) class(c) ## [1] &quot;numeric&quot; d &lt;- c(&quot;sunny&quot;, &quot;rainy&quot;, &quot;foggy&quot;) class(d) ## [1] &quot;character&quot; Notice that we did not just add all values one after the other, but followed a certain notation that begins with the function c() \\(\\rightarrow\\) combine or concatenate 1.2.5 Data Frames e &lt;- data.frame(c,d) class(e) ## [1] &quot;data.frame&quot; There are several ways of adding variables to a data frame, but the data.frame() command is the simplest. All values in a variable should have the same class. Go ahead and try out hm &lt;- c(3, \"sunny\", 5.2) and check the class. What happened - did you expect that? Happy T-Rex 1.3 Working with Data Frames e ## c d ## 1 6 sunny ## 2 7 rainy ## 3 8 foggy We usually want to access either certain rows or columns from data frames Base R uses square brackets []: “take this data, but only certain rows/columns/cells” Remember: The brackets understand the first input as rows and the second as columns - rows right away German: Zuerst Zeilen, Später Spalten 1.3.1 Square Brackets e[1, ] # first row ## c d ## 1 6 sunny e[ , 1] # first column ## [1] 6 7 8 weather &lt;- e[ , 2]; weather ## [1] &quot;sunny&quot; &quot;rainy&quot; &quot;foggy&quot; e[1, 1]*e[2, 1] # certain cells ## [1] 42 1.3.2 Data Sets in Base R Data set e contains three numbers in column c and different strings in column d Any row, column or cell can be selected Values can also be re-assigned e.g. to a new variable named “weather” Calculations can be performed on single cells in the data frame (only if they contain numerics) 1.3.3 Square Brackets With square brackets we can only index rows and columns that are present in the data. That maybe sounds obvious, but can easily lead to confusion because of error messages! What happens when you try to index e[,3]? 1.3.4 Brainteaser Use the data frame e that we have created. With the square bracket indexing you can also use a variable name in quotes to index the right column. Create vector that contains the second row from column “c” and the third row from column “d”. What is the first row of column one to the power of the third row of column one? 1.3.5 Solution: 1 Creating a new vector from certain columns in e newvector &lt;- c(e[2, &quot;c&quot;], e[3, &quot;d&quot;]) newvector ## [1] &quot;7&quot; &quot;foggy&quot; 1.3.6 Solution: 2 First row of column one to the power of the third row of column one in data set e e[1, 1]^e[3, 1] ## [1] 1679616 1.3.7 Base R vs. Packages Base R is important to learn, you can do anything in base R Anything you can do in R without loading anything is base R E.g. [ ], the c()-function, sqrt()-function… Using packages is just more intuitive and fun, usually 1.4 Installing Packages Hexagon Package logos Most packages are available on CRAN - the Comprehensive R Archive Network. Easily install the package you wantwith the command install.packages(\"packagename\") Important: Package name must be in quotes for the installation Loading it into a script works without quotes using library(packagename) 1.4.1 Tidyverse Packages usually serve quite specific purposes, e.g. dplyr: makes data handling easier and more intuitive ggplot2, which allows us to create beautiful, publication-ready plots and visualizations tidyverse: “meta package” which automatically loads those two and several other packages Makes the functions from those many different packages available at once Quite convenient when we want to use a lot of those packages in the same session or script Also takes a lot longer to load (sometimes not actually necessary) 1.4.2 Using the tidyverse Please install the tidyverse, using install.packages(\"tidyverse\") in the console Then load it into your script with library(tidyverse) Test whether it works by typing iris %&gt;% pull(Sepal.Length) %&gt;% mean() 1.4.3 Explanation 1.4.3.1 iris %&gt;% pull(Sepal.Length) %&gt;% mean() \\(\\rightarrow\\) This line of code takes the data set iris (included in R by default) “pulls” the variable Sepal.Length out of the data and runs the mean() function on it, to calculate the average sepal length, should be 5.8433333. 1.4.4 Exercise Using a package can be made explicit by typing packagename::functionname(). Accessing “Help” pages is done by typing “?functionname” or “?packagename::functionname()”. Find Help on the function select() from the package dplyr What does it do? Try selecting only the “Species” Variable inside the “iris” data set (it is basically in your environment even if it is not explicitly shown) What are the species called? How many different species are there? What would you need to make the output clearer? 1.4.5 Solution The “select” function works similar to the square brackets, but it makes it a little more intuitive You can select a variable by name or position in the data frame You cannot select rows, only columns i.e. variables Selecting the Species variable from iris data works with select(iris, Species) and outputs the variable as a one-column-dataframe The species are called setosa, versicolor &amp; virginica There are 3 unique species in the data set You can use the function unique() like so: unique(select(iris, Species)) 1.5 Wrap-Up &amp; Further Resources R is a powerful language, R Studio is its user interface R can be a calculator and perform basic and advanced math We mostly work with variables and data frames Packages make working with R easier and more fun! Tadaa Data: R für Psychos (german) Intro to R Tidyverse "],["r-basics-and-how-to-read-error-messages.html", "Chapter 2 R Basics and how to read error messages 2.1 Basics 2.2 Basic Functions IV 2.3 Exercise 2.4 Logic 2.5 Reading Error Messages 2.6 Exercise 2.7 Wrap-Up &amp; Further Resources", " Chapter 2 R Basics and how to read error messages Iris Flower 2.1 Basics Assign variables with the \\(\\leftarrow\\) like so: x &lt;- c(1, 2, 3) To avoid a cluttered work environment, rm() removes variables Execute a line of code with ctrl + enter in the editor In console you just need to press enter Text aka strings need to be put in quotes so it can be recognized as such some_text &lt;- c(\"amazing\", \"wow\") Comments can and should be added to your code using the # 2.1.1 Basic Functions I a &lt;- c(1, 2, 3, 4) b &lt;- c(5, 7, 9, 11) mean(a) ## [1] 2.5 sd(b) ## [1] 2.581989 min(b) ## [1] 5 2.1.2 Basic Functions II max(b) ## [1] 11 a+b ## [1] 6 9 12 15 sum(b) ## [1] 32 length(a) ## [1] 4 2.1.3 Basic Functions III c &lt;- 3:9 c # look at the variable ## [1] 3 4 5 6 7 8 9 range(c) ## [1] 3 9 d &lt;- c(10:15, 20:25) 2.2 Basic Functions IV d # look at the variable ## [1] 10 11 12 13 14 15 20 21 22 23 24 25 d[1] # index ## [1] 10 d[d==10] ## [1] 10 which(d==12) ## [1] 3 2.3 Exercise Create a vector x with the numbers from 50 to 100 and 150 to 200. Find its mean, standard deviation and its range. What is the 77th number of vector x? 2.3.1 Solution x &lt;- c(50:100, 150:200) mean(x), sd(x), range(x) %&gt;% round(2): , 52.38, 50, 200 %&gt;% round(2) takes the numbers and rounds them up to two decimal points x[77]: 175 2.3.2 Brainteaser We define two variables in the following way: e &lt;- 1:5 f &lt;- 2:5 Let’s say we want to access the number 5 in both variables. How come e[5] works but f[5] does not? 2.4 Logic next to numeric and string variables: boolean either hold the value TRUE or FALSE (also 1 or 0 respectively) useful for filtering data also for conditional operations and recoding 2.4.1 Logical Examples I a &lt;- 4; b &lt;- 5 a &lt; b # smaller than ## [1] TRUE a &lt;= 4 # smaller/ equal ## [1] TRUE a &gt; b # greater than ## [1] FALSE a &gt;= 3 # greater/ equal ## [1] TRUE 2.4.2 Logical Examples II a == b # double equal sign!! ## [1] FALSE a != b ## [1] TRUE c &lt;- TRUE c ## [1] TRUE !c ## [1] FALSE 2.4.3 Putting it all together… 2.4.3.1 Exercise We want to find out whether the average Petal Length and Sepal Length of iris flowers are different from each other. Use what you know to “ask R” if those values are unequal! Hint: You will need logic, the mean()-function and square brackets. Use names(iris) to find all variable names in that data set. 2.4.4 Solution Square bracket indexing with the variable name in quotes iris[ , \"Sepal.Length\"] iris[ , \"Petal.Length\"] now we add the mean function around both like this: mean(iris[ , \"Sepal.Length\"]) mean(iris[ , \"Sepal.Length\"]) Finally we compare the two with the != operator: mean(iris[ , \"Sepal.Length\"]) != mean(iris[ , \"Petal.Length\"]) TRUE 2.5 Reading Error Messages Mistakes happen to everyone Error messages are often frustrating but helpful Many common “beginner problems” are fairly easy to fix once you understand the error Try to think of error messages as invites to help R understand what you are trying to achieve! Pobody’s Nerfect 2.5.1 Error: unexpected ‘X’ in “Y” Pretty straightforward: R expects a certain kind of symbol where ‘X’ is Input did not match the expectation For example: Comma as a decimal separator In almost all (american-built) coding, the decimal separator is a point Input: ’3,141’will receive the error message Error: unexpected ‘,’ in “3,” R expected the input to be ‘3.141’ \\(\\rightarrow\\) Fix: Replace the ‘x’ in “Y” with something that R can understand. 2.5.2 Error: object ‘A’ not found Object you are trying to use cannot be found by R Most common cause: probably you misspelled the object name somewhere R is case-sensitive: was object A defined as a? Or maybe vector is spelled vcteor in your function? Maybe a variable was never defined but now you want to use it? Or it was defined in a (different) data frame? \\(\\rightarrow\\) Fix: Make sure the object name is spelled correctly and was defined prior to using it in a function, calculation or elsewhere. Also often appears with “function xyz not found” In this case, we probably forgot to load the package first, which contains that function Fix: Figure out which package is needed and load it with the library() command If you still encounter an error like “there is no package called ‘xyz’”, either the name of the package is misspelled or you need to install it first using install.packages() 2.5.3 Error: R does nothing after running a command This is not an error message but still very common, especially at the beginning Usually, there is a &gt; symbol at the beginning of our console input line If R is “unfinished” with a command, you see + instead This happens when R can`t work with the command because there is something missing In most cases, this will be closing parentheses \\(\\rightarrow\\) Fix: Click in your console and use the Esc button to cancel the command. Then, look at the code you were trying to run and see if there is some closing statement such as ) missing and try again. 2.5.4 Error: R does nothing after running a command We have not talked about the %&gt;%-pipe in depth, but you will hopefully start to love this tool and use it a lot If we end a command with a %&gt;% R will show the same behavior of not executing the code \\(\\rightarrow\\) R expects something else after the pipe, so when there’s nothing, R is confused When you need help figuring out how a function works, there are several ways to get it. Try typing ?magrittr::`%&gt;%` into your console and hit enter! 2.6 Exercise Below is some code that has a few problems. Try to identify them and how they might be fixed. Feel free to test them out if you are not sure! Library(greatpackage) mean(coolvariable) a &lt;- c(1, 3, 6, 7 b &lt;- c(2, 4; 6, 8) 2.6.1 Solution Library(greatpackage) - two problems: library should not be capitalized “greatpackage” does not exist and can thus not be loaded mean(coolvariable): coolvariable was not defined previously a &lt;- c(1, 3, 6, 7: the command is not finished, it needs a closing parentheses b &lt;- c(2, 4; 6, 8): we need all commas to seperate numbers in a vector, not a semicolon 2.7 Wrap-Up &amp; Further Resources Functions work with input inside round brackets, e.g. c(1, 2, 3) a point . is a decimal separator in numbers; a comma , seperates input in functions Logical operators compare data, e.g. 7 &gt; 6 would output TRUE # allows comments in the code Errors should be invitations to make your code more understandable for R \\(\\rightarrow\\) the better we understand the problem, the better we can fix it! StackOverflow Discovering Statistics Using R Book by Andy Field, available from KIM "],["best-practice.html", "Chapter 3 Best Practice 3.1 What is Best Practice? 3.2 Naming Things 3.3 Scenario: Creating Data meaningfully 3.4 Exercise: Creating Data meaningfully 3.5 Working Directories 3.6 R Projects 3.7 Make R your own: Appearance 3.8 Not-so-secret keyboard shortcuts to make your life easier 3.9 Wrap-Up &amp; Further Resources", " Chapter 3 Best Practice 3.1 What is Best Practice? “Many roads lead to Rome”: You can achieve most things in many different ways Best Practice refers to the best/ easiest/ clearest way of working with R 3.1.1 Overview Naming Variables Creating data meaningfully Working Directories R Projects Make R your own: 3.2 Naming Things R is a so-called object-oriented language. All our data exist as “objects” To do stuff with those objects is called using a function or command Naming of objects is an every-day aspect of working with R Proper naming makes our life so much easier! 3.2.1 Different Naming Conventions R is case-sensitive \\(\\rightarrow\\) abc is a different object than ABC, which is different from a_b_c, which is different from A.B.C … All of these variants are possible! Every programming language has slightly different conventions, e.g. Python usually uses snake_case Also advisable for R :) Avoid white spaces in all types of names Especially important in file names! R has problems finding files with names such as “My file with a really specific name.bib” Easy fix: “My_file_with_a_really_specific_name.bib” 3.2.2 Naming conventions in R Lower-case variable names, e.g. gender instead of Gender or GENDER Underscore to differentiate between different words in your object names if necessary, e.g. music_preference Avoid using numbers in your names because likely either you or R will get confused with this at some point, e.g. raw_data instead of data1 1 (one) and the l (lower-case L) can look very similar Use abbreviations where useful, e.g. rt instead of reaction_times Use names that will still make sense to you in the future, i.e. avoid names like asdf_data or blibblobfundata 3.2.3 Exercise: Name Examples great variable Spaces can technically work but are a hassle to access Areallysuperinsanelyverylongvariablename Variables are supposed to reduce workload Howaboutthis$ Special characters should be avoided age_grouped GenderRecoded aMAZING¯vARIABLE¯nAME Please just no. 3.3 Scenario: Creating Data meaningfully Imagine we are going to measure some test scores at a school that are supposed to reflect the kids’ IQ (mean 100, sd 15). In order to prepare for data analysis, we want to simulate what the data might look like beforehand. We are going to measure their age and IQ score and we will be assessing class 7a and 7b. 3.4 Exercise: Creating Data meaningfully Create two data frames - one for each class. They should each contain n = 20 entries (for 20 kids) and 2 variables i.e. age and iq score. We assume age is a random number from 12 to 15 and iq follows normal distribution with mean = 100, sd = 15. Afterwards, add a variable to code the class to each data frame and add them together underneath each other. Use the functions on the board and look in the R help if you need more input on how to use them. 3.4.1 Solution I # Create the dataframes scores7a &lt;- data.frame(age = sample(x = 12:15, size = 20, replace = T), iq = rnorm(n = 20, mean = 100, sd = 15)) scores7b &lt;- data.frame(age = sample(x = 12:15, size = 20, replace = T), iq = rnorm(n = 20, mean = 100, sd = 15)) # Notice anything about the code? str(scores7a); str(scores7b) ## &#39;data.frame&#39;: 20 obs. of 2 variables: ## $ age: int 14 15 15 14 13 13 14 14 13 13 ... ## $ iq : num 92.7 103.9 129.8 83.6 124.9 ... ## &#39;data.frame&#39;: 20 obs. of 2 variables: ## $ age: int 12 13 12 15 14 15 13 15 15 13 ... ## $ iq : num 107.9 94.6 106.8 90.7 103.2 ... 3.4.2 Solution II # Add information about the class scores7a$class &lt;- &quot;7a&quot; scores7b$class &lt;- &quot;7b&quot; # create big dataframe allscores &lt;- rbind(scores7a, scores7b) # Check the overall data frame for plausibility str(allscores) ## &#39;data.frame&#39;: 40 obs. of 3 variables: ## $ age : int 14 15 15 14 13 13 14 14 13 13 ... ## $ iq : num 92.7 103.9 129.8 83.6 124.9 ... ## $ class: chr &quot;7a&quot; &quot;7a&quot; &quot;7a&quot; &quot;7a&quot; ... table(allscores$class) ## ## 7a 7b ## 20 20 3.5 Working Directories A working directory corresponds to the folder on your computer that you are working in If you save a script, it will be saved there We usually work with data from other sources or different files e.g. WEXTOR data or bibfiles for bibliography Check your working directory: getwd() Manually set your working directory: setwd() Any file you want to use, e.g. containing data will be searched in that folder 3.5.1 Try it out! Execute the getwd() command in the console. Which folder is R working in, is it the one you expected? 3.5.2 Cautionary Tale The file path in getwd() will always be absolute \\(\\rightarrow\\) full file path from your computer Sharing is difficult Working with that script on your other computer is difficult Nobody else can (easily) reproduce your code It is easy to forget which folder you’re working on and which one you want to be working on So R won’t find files you’re looking for and throw errors 3.6 R Projects Solution: Create an R Project for your project! Automatically sets your working directory to the folder you put the project in Makes sharing your project easy Saves you time and frustration, trust me 3.6.1 Let’s try that out! Under File \\(\\rightarrow\\) New project... 3.6.2 Homework: Put it to the test Create a subfolder called “data” in your R project. Download the file “mindfulness_data.Rds” from ILIAS and save it in that folder. Now try to load it into your script and check whether it worked by typing: mindful &lt;- readRDS(&quot;./data/mindfulness_data.Rds&quot;) # relative filepath str(mindful) ## tibble [601 × 6] (S3: tbl_df/tbl/data.frame) ## $ observing : num [1:601] 3.9 3.8 5 3.5 3.7 3.2 3.9 3 3.6 3.1 ... ## $ describing: num [1:601] 3 2.9 3.5 3 3.3 3.1 2.9 2.9 3 3 ... ## $ accepting : num [1:601] 3.7 4.6 1.7 3.9 4 3.3 1.7 3.1 2.2 4.1 ... ## $ acting : num [1:601] 2.7 3.8 2.8 3 3.3 4 2.4 3.4 3 3 ... ## $ age : num [1:601] 38 26 53 56 18 34 70 24 31 43 ... ## $ gender : Factor w/ 3 levels &quot;male&quot;,&quot;female&quot;,..: 2 1 2 1 1 1 2 2 1 1 ... 3.7 Make R your own: Appearance There are many different “themes” for R Studio Control not only what the interface looks like but also how code is displayed Under Tools \\(\\rightarrow\\) Global Options \\(\\rightarrow\\) Appearance 3.7.1 Why? Honestly? Because It’s fun. If a program is no fun, you won’t like using it And if you don’t like using it, you won’t get the practice you need! 3.8 Not-so-secret keyboard shortcuts to make your life easier Function Shortcut PC / Mac Run current line Ctrl + Enter / Cmd + Return Add &lt;- Alt + - / Option + - Add %&gt;% Ctrl + Shift + M / Cmd + Shift + M Show help F1 Options for auto-fill Tab Create New Script Ctrl + Shift + N / Cmd + Shift + N Comment out line Ctrl + Shift + C / Cmd + Shift + C Save your script Ctrl + S / Cmd + S 3.9 Wrap-Up &amp; Further Resources Stick to naming conventions for R objects and related files Make sure your working directory is correct Use R projects to organize your scripts easily Make R fun and appealing to use FOR YOU! R Projects: A quick overview Starting your R projects RStudio Projects and Directories (rather thorough) Naming Conventions https://www.reddit.com/r/ProgrammerHumor/comments/6stwag/can_you_stick_to_any_naming_convention/ "],["into-the-tidyverse-data-munging-with-dplyr.html", "Chapter 4 Into the tidyverse: Data munging with dplyr 4.1 Working with packages 4.2 What is dplyr? 4.3 Intro to the exercise 4.4 Exercise 4.5 On a Tangent: magrittr pipe %&gt;% 4.6 group_by &amp; summarize 4.7 Wrap-Up &amp; Further Resources", " Chapter 4 Into the tidyverse: Data munging with dplyr 4.1 Working with packages install packages with install.packages() Only once in the console! load packages with library() Every time you load a script or start a new session Usually in the script, but also in the console Specific function from a package: package::function() Use if you just need that one function once and don’t want load the entire package Or to explicitly show the according package Or the function name is also in other packages (e.g. “filter” is usually dplyr::filter, but sometimes stats::filter) 4.1.1 Incomplete List of Useful Packages 4.1.1.1 For Reference Package Name General Purpose psych Advanced statistical testing / modeling e.g. factor analysis tibble Alternative for creating data frames tidyr Clean up daata &amp; simple reshaping dropR Dropout analysis (by experimental condition) foreign Handling data from SPSS corrplot Create correlation plots/ matrices 4.1.2 The tidyverse “The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.” tidyverse.org The features are very intuitive and clear It is easy and makes sense to combine several features of those packages We will focus on aspects of literal everyday use: Clean up data aka. data wrangling \\(\\rightarrow\\) dplyr Visualize data for overview or reporting \\(\\rightarrow\\) ggplot2 4.2 What is dplyr? dplyr logo Probably the best and most important package in R Powerful tool for editing data in data frames Great way to keep your workflow clear and reproducible Very intuitively named functions install.packages(\"dplyr\") \\(\\rightarrow\\) library(dplyr) 4.2.1 Most important dplyr functions select(): select certain columns by name filter(): filter values from a column/variable rename(): rename a variable mutate(): change values of a column (new or existing) %&gt;%: “pipe” brings data from previous operation to the next (Shortcut: Strg + Shift + M) Cheatsheet: https://github.com/rstudio/cheatsheets/blob/main/data-transformation.pdf 4.3 Intro to the exercise Iris Arten Remember the iris data set? contains information on iris flowers of different species glimpse(iris) ## Rows: 150 ## Columns: 5 ## $ Sepal.Length &lt;dbl&gt; 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.… ## $ Sepal.Width &lt;dbl&gt; 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.… ## $ Petal.Length &lt;dbl&gt; 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.… ## $ Petal.Width &lt;dbl&gt; 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.… ## $ Species &lt;fct&gt; setosa, setosa, setosa, setosa, setosa, setosa, setosa, s… 4.3.1 Imagine… We only want data from species “virginica” We are interested in in sepal length We want to adjust variable names 4.3.2 First Example iris_virginica &lt;- iris %&gt;% # 1. create new data set as copy filter(Species == &quot;virginica&quot;) %&gt;% # 2. only virginica select(Petal.Length, Species) %&gt;% # 3. select columns rename(plength = Petal.Length) # 4. rename variable/column head(iris_virginica) ## plength Species ## 1 6.0 virginica ## 2 5.1 virginica ## 3 5.9 virginica ## 4 5.6 virginica ## 5 5.8 virginica ## 6 6.6 virginica str(iris_virginica) ## &#39;data.frame&#39;: 50 obs. of 2 variables: ## $ plength: num 6 5.1 5.9 5.6 5.8 6.6 4.5 6.3 5.8 6.1 ... ## $ Species: Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 3 3 3 3 3 3 3 3 3 3 ... 4.3.3 Filter filter scheme Filters data by a value in a variable With filter we keep only certain rows in our data Needs logical operators as input “keep only cases where variable x has value abc” Can also be used with the ! to drop certain cases Drop NAs: data %&gt;% filter(!is.na(variable)) 4.3.4 Select select scheme Selects variables based on their names With select we keep only certain columns in our data Needs variable names as input “keep only variables with this name” Can also be used with the ! to drop certain variables Cave: if we want to extract one variable to calculate something, you will want to use pull() instead Check iris %&gt;% select(Species) %&gt;% class() and iris %&gt;% pull(Species) %&gt;% class() 4.3.5 Mutate We also want the species to be capitalized in our data We also want to add a new binary variable for whether a flower’s petals are longer than 5.5 cm (1) or not (0) for this, we use the ifelse() function: Needs a logical as first input, then what to do if it’s true, last what to do if it’s false Mutate takes a variable name as input (existing or new) and some function or calculation to be done on that variable iris_virginica &lt;- iris_virginica %&gt;% mutate(Species = toupper(Species), bigboi = ifelse(plength &gt; 5.5, 1, 0)) head(iris_virginica) ## plength Species bigboi ## 1 6.0 VIRGINICA 1 ## 2 5.1 VIRGINICA 0 ## 3 5.9 VIRGINICA 1 ## 4 5.6 VIRGINICA 1 ## 5 5.8 VIRGINICA 1 ## 6 6.6 VIRGINICA 1 table(iris_virginica$Species) ## ## VIRGINICA ## 50 4.4 Exercise Imagine we want to edit the iris data set for our american colleagues, who are interested in the petal width of the setosa and versicolor species. Create a new dataset from iris with a meaningful name select() the variables of interest filter() the species that we want Use %in% to filter by more than one value, or think about a reverse approach…! rename() the Petal.Width variable to be named pwidth Use mutate() to add a new variable named “pwidth_inch”, which contains the petal width in inches Calculation: pwidth / 2.54 (2.54 cm = 1 inch) 4.4.1 Solution iris_twospec &lt;- iris %&gt;% select(Petal.Width, Species) %&gt;% filter(Species %in% c(&quot;setosa&quot;, &quot;versicolor&quot;)) %&gt;% # or: filter(Species != &quot;virginica&quot;) # or: filter(Species == c(&quot;setosa&quot; | &quot;versicolor&quot;)) rename(pwidth = Petal.Width) %&gt;% mutate(pwidth_inch = pwidth / 2.54) head(iris_twospec, 8) ## pwidth Species pwidth_inch ## 1 0.2 setosa 0.07874016 ## 2 0.2 setosa 0.07874016 ## 3 0.2 setosa 0.07874016 ## 4 0.2 setosa 0.07874016 ## 5 0.2 setosa 0.07874016 ## 6 0.4 setosa 0.15748031 ## 7 0.3 setosa 0.11811024 ## 8 0.2 setosa 0.07874016 Hadley Wickham Hadley Wickham, developer of the tidyverse 4.5 On a Tangent: magrittr pipe %&gt;% The pipe keeps our code readable and tidy It allows us to keep edits in separate lines, but we still only have to run one command for every task we need It’s easy to add new commands by using another pipe operator, or to leave edits out but commenting out the respective line of code Most things can be achieved with or without pipe 4.5.1 Example # With pipe - clear iris_edit &lt;- iris %&gt;% filter(Petal.Length &gt; 3) %&gt;% # only big petals select(Species, Petal.Length, Sepal.Length) %&gt;% # only those columns mutate(random_calculation = Petal.Length * Sepal.Length) # calculate random new variable # Without pipe - a lot of typing, prone to error, annoying to debug iris_edit2 &lt;- filter(iris, Petal.Length &gt; 3) iris_edit2 &lt;- select(iris_edit2, Species, Petal.Length, Sepal.Length) iris_edit2 &lt;- mutate(iris_edit2, random_calculation = Petal.Length * Sepal.Length) # Are the two versions equal? all.equal(iris_edit, iris_edit2) ## [1] TRUE 4.5.2 Brainteaser In the part with pipe we used the iris data to edit and assigned it to iris_edit In the part without pipe we used iris in the first line, but afterwards we used iris_edit2 for assignment and edit Why is that? 4.5.3 How to pipe for base-R Pipe helps us not to drown in parentheses when conducting analyses, e.g. calculating a mean after filtering It makes code longer but still easier to read # Without pipe round(mean(iris$Petal.Length[iris$Species == &quot;setosa&quot;]), digits = 2) ## [1] 1.46 # With pipe iris %&gt;% filter(Species == &quot;setosa&quot;) %&gt;% pull(Petal.Length) %&gt;% mean() %&gt;% round(digits = 2) ## [1] 1.46 4.5.4 Brainteaser We want to edit the iris data to rename a Petal.Length to pl and mutate it to be multiplied by ten. Why does the first version work, but not the second one? # Version 1 iris %&gt;% mutate(Petal.Length = Petal.Length * 10) %&gt;% rename(pl = Petal.Length) %&gt;% glimpse() # Version 2 iris %&gt;% rename(pl = Petal.Length) %&gt;% mutate(Petal.Length = Petal.Length * 10) %&gt;% glimpse() 4.6 group_by &amp; summarize With the dplyr-workflow, we can easily output group statistics Keywords: group_by() &amp; summarize() The code is built like any other dplyr workflow with pipes ( %&gt;% ) in between each: Define/ name the data frame group_by(variable_name) in summarize, define a name for the statistic, use a =, use a function like mean() for the measure 4.6.1 Example: group_by &amp; summarize names(Orange) # use different default data set ## [1] &quot;Tree&quot; &quot;age&quot; &quot;circumference&quot; Orange %&gt;% group_by(Tree) %&gt;% summarize(m_age = mean(age), m_circumference = mean(circumference), n = n()) ## # A tibble: 5 × 4 ## Tree m_age m_circumference n ## &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 3 922. 94 7 ## 2 1 922. 99.6 7 ## 3 5 922. 111. 7 ## 4 2 922. 135. 7 ## 5 4 922. 139. 7 4.6.2 Exercise: group_by &amp; summarize Follow the structure to group the iris data set by Species and output a summary with the mean values of all four other variables in the data. Also include the grouped n. 4.6.3 Solution iris %&gt;% group_by(Species) %&gt;% summarize(m_plength = mean(Petal.Length), m_pwidth = mean(Petal.Width), m_slength = mean(Sepal.Length), m_swidth = mean(Sepal.Width), n = n()) ## # A tibble: 3 × 6 ## Species m_plength m_pwidth m_slength m_swidth n ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 setosa 1.46 0.246 5.01 3.43 50 ## 2 versicolor 4.26 1.33 5.94 2.77 50 ## 3 virginica 5.55 2.03 6.59 2.97 50 4.7 Wrap-Up &amp; Further Resources Packages make working with R easier dplyr is a powerful tool for editing data (select, filter, mutate…) The pipe %&gt;% makes your code clearer and “follows the thought process” R for Data Science Book dplyr vignette YouTube: 20 R Packages that you should know - you for sure don’t need them all, but there are some nice inspirations for working with packages in there Which idiot… "],["working-with-existing-data.html", "Chapter 5 Working with existing Data 5.1 First Steps: Seminar Data 5.2 Working with the data: Codebook 5.3 Working with the data: Descriptives 5.4 Wrap-Up &amp; Further Resources", " Chapter 5 Working with existing Data Please also install the wobblynameR package (only available on GitHub). For that you need the devtools package first: install.packages(“devtools”) devtools::install_github(“the-tave/wobblynameR”) 5.1 First Steps: Seminar Data Download the data frame from ILIAS and save it in the data subfolder in your R-Project. Use the “Import Dataset” Menu under the Environment tab In that menu, we can select our data file &amp; choose some basic aspects of reading in that data Make sure you have the right package installed for reading in specific data types! Here: Please install the readr package with install.packages(“readr”) 5.1.1 Reading in the data 5.1.1.1 Generated Code library(readr) PsychResearchR_data &lt;- read_delim(&quot;data/PsychResearchR_data.csv&quot;, delim = &quot;;&quot;, escape_double = FALSE, trim_ws = TRUE) View(PsychResearchR_data) 5.1.2 Basic Edits Choose an appropriate name, e.g. raw Put all library commands at the top of the script so you are ready to conduct all analyses You do not need the View() command in your script If you are not sure about the state of your data, look at it first! View() opens the whole data in new tab; glimpse(), str() and head() give you a rough overview; names() shows you all variable names Some edits are already possible in the menu! Column types can (and sometimes should) be adjusted, e.g. recognizing dates Create a new dataset as a copy in which you do all further edits! E.g. seminar with proper varname prefix 5.1.3 Basic Edits 5.1.3.1 Result library(readr) library(wobblynameR) raw &lt;- read_delim(&quot;./data/PsychResearchR_data.csv&quot;, delim = &quot;;&quot;, escape_double = FALSE, col_types = cols(.wx.5.start_date = col_date(format = &quot;%m/%d/%y&quot;), .wx.7.end_date = col_date(format = &quot;%m/%d/%y&quot;), ...32 = col_skip()), trim_ws = TRUE) ## New names: ## • `` -&gt; `...32` # Add &quot;v&quot; as varname prefix to all variables seminar &lt;- namepref0(raw, &quot;v&quot;) 5.1.4 Choosing how to read in the data Data Source R command WEXTOR (CSV) readr::read_delim(\"data.csv\", delim = \";\") Excel (XLSX) xlsx::read.xlsx(\"data.xlsx\", sheetIndex = 1) R Data Source (RDS) readRDS(\"data.Rds\") SPSS (SAV) foreign::read.spss(\"data.sav\") 5.2 Working with the data: Codebook What variables are in the data? -&gt; names(seminar) v.wx.1.id, v.wx.2.ip, v.wx.3.experimental_condition, v.wx.4.start_time, v.wx.5.start_date, v.wx.6.end_time, v.wx.7.end_date, v.wx.8.session_length, v.wx.page_trail, v.wx.pages_visited, v.wx.user_agent, v01_gender, v02_age, v03_prog_exp, v04_bodyheight, v05_skill_tech, v06_loc, v07_genre, v08_loudness, v09_smoke, v10_motivation, v11_soul, v12_soul_phil, vrt_1, vrt_2, vrt_3, vvi_1, vvi_2, vvi_3, vz0_browser_screen_h, vz0_browser_screen_w What can they tell us? Which analyses might be of interest? 5.3 Working with the data: Descriptives In any report, we need to give our readers/ listeners/… an overview of the data We need to know the sample to judge the results! A sample of e.g. 10 female psychology students probably shows different results -generally speaking - than a sample of 10 male soldiers What are descriptives? Mean Median Mode Variability (standard deviation) Data Visualization… 5.3.1 group_by &amp; summarize With the dplyr-workflow, we can easily output group statistics Keywords: group_by() &amp; summarize() The code is built like any other dplyr workflow with pipes ( %&gt;% ) in between each: Define/ name the data frame group_by(variable_name) in summarize, define a name for the statistic, use a =, use a function like mean() for the measure 5.3.2 Example: group_by &amp; summarize iris %&gt;% group_by(Species) %&gt;% summarize(m_plength = mean(Petal.Length), med_pwidth = median(Petal.Width), m_slength = mean(Sepal.Length), mode_swidth = getmode(Sepal.Width), n = n()) ## # A tibble: 3 × 6 ## Species m_plength med_pwidth m_slength mode_swidth n ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 setosa 1.46 0.2 5.01 3.4 50 ## 2 versicolor 4.26 1.3 5.94 3 50 ## 3 virginica 5.55 2 6.59 3 50 5.3.3 Exercise: group_by &amp; summarize Follow the structure to group the edited seminar data by belief in the soul and output a summary with mean age mean technological skill mode music genre median volume of music grouped n (function n()) 5.3.4 Solution seminar %&gt;% group_by(v11_soul) %&gt;% summarize(m_age = mean(v02_age), m_tech_skill = mean(v05_skill_tech), mode_music = getmode(v07_genre), median_volume = median(v08_loudness), n = n()) ## # A tibble: 3 × 6 ## v11_soul m_age m_tech_skill mode_music median_volume n ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; ## 1 dunno 23.4 29.4 techno 89 5 ## 2 no 22 45 pop 74.5 2 ## 3 yes 22.5 42 rock 67.5 6 5.3.5 Exercise: In teams of 2 In teams of 2, think about your own thesis (if you don’t have a topic yet, just think of something that you might want to research): Which of our variables in the seminar data are similar to those that you want to analyze? What can we do to prepare you for being able to conduct your analyses? Write down your thoughts so we can use some ideas in our coming classes! 5.4 Wrap-Up &amp; Further Resources Reading in data works with commands like readRDS() but also the “Import Dataset” Menu Use the menu for WEXTOR data to get an overview and reproducible code Get/ create a codebook for your data Always report descriptive data dplyr’s group_by() and summarize() can output grouped descriptives Reading in Data in Different Formats Stats and R: Descriptives "],["loops-and-conditionals.html", "Chapter 6 Loops and Conditionals 6.1 What is a loop? 6.2 Exercise: What should I use? 6.3 for-loop 6.4 Same function, different variables 6.5 Loop with Conditional 6.6 Wrap-Up &amp; Further Resources", " Chapter 6 Loops and Conditionals 6.1 What is a loop? Loops are automations that take care of repetitive tasks Typically, we might go through data row by row and perform a task Loops can have different forms: for: loop over a pre-defined set of values, such as a number sequence while: define constraints and keep loop running as long as they are met repeat: loop repeats until broken (I do not recommend this ever!) For is most common, while is nice for more advanced simulations 6.1.1 What are conditionals? Conditionals define different actions for different conditions They follow intuitive language: if: define action to take when condition is met (logical) else if: defince action for another condition else: define action for everything else ifelse is the shortcut-function we already got to know for recoding with mutate() defines exactly 1 condition, 1 action, 1 alternative expandable version of ifelse is case_when 6.2 Exercise: What should I use? I want to print numbers from 1 to 7! for loop (but realistically 1:7 ;) ) I need to simulate more data as long as my sample size is smaller than 200! while loop I want to print the age of only the females in my sample! if/ else 6.3 for-loop In a for loop, we need to define the range for which the loop should run We define an iterating variable that will change each time the loop runs and take on all values of the defined range Typically, we call this variable “i” We define the range in round brackets and all actions the loop should take in curly brackets 6.3.1 Example for(i in 1:4){ print(paste(&quot;The iteration is&quot;, i)) } ## [1] &quot;The iteration is 1&quot; ## [1] &quot;The iteration is 2&quot; ## [1] &quot;The iteration is 3&quot; ## [1] &quot;The iteration is 4&quot; 6.3.2 Conditionals: If - else if(variable == &quot;value&quot;){ print(&quot;Do something&quot;) } else if(variable == &quot;other_value&quot;){ print(&quot;Do some other thing&quot;) } else { print(&quot;Do anything else&quot;) } 6.3.3 Conditionals: If - else 6.3.3.1 Checking numbers | We want to test whether numbers in a loop are divisible by 3. If they are, we will display “Divisible by 3”, and if not, we will simply output the iteration number like before. For that we will use the modulo %% , which gives us the rest of a division. Let’s try it out! 6.3.3.2 Checking numbers || for(i in 1:4){ if(i %% 3 == 0){ print(&quot;Divisible by 3!&quot;) } else { print(i) } } ## [1] 1 ## [1] 2 ## [1] &quot;Divisible by 3!&quot; ## [1] 4 6.3.4 Exercise Use a for-loop to display your favorite numbers. The numbers should be between 10 and 25. If the number is divisible completely by 5, you should output “Divisible by 5!”, if not please output the iteration number only. 6.3.5 Solution for(i in 10:25){ if(i %% 5 == 0){ print(&quot;Divisible by 5!&quot;) } else { print(i) } } ## [1] &quot;Divisible by 5!&quot; ## [1] 11 ## [1] 12 ## [1] 13 ## [1] 14 ## [1] &quot;Divisible by 5!&quot; ## [1] 16 ## [1] 17 ## [1] 18 ## [1] 19 ## [1] &quot;Divisible by 5!&quot; ## [1] 21 ## [1] 22 ## [1] 23 ## [1] 24 ## [1] &quot;Divisible by 5!&quot; 6.4 Same function, different variables for(i in c(&quot;Sepal.Length&quot;, &quot;Sepal.Width&quot;, &quot;Petal.Length&quot;, &quot;Petal.Width&quot;)){ print(mean(iris[ , i])) } ## [1] 5.843333 ## [1] 3.057333 ## [1] 3.758 ## [1] 1.199333 Brainteaser : What is the class() of i here? character 6.4.1 More sophisticated vector &lt;- c(&quot;Sepal.Length&quot;, &quot;Sepal.Width&quot;, &quot;Petal.Length&quot;, &quot;Petal.Width&quot;) for(i in 1:length(vector)){ print(paste(&quot;The mean value of&quot;, vector[i], &quot;is&quot;, round(mean(iris[ , vector[i]]), 2))) } ## [1] &quot;The mean value of Sepal.Length is 5.84&quot; ## [1] &quot;The mean value of Sepal.Width is 3.06&quot; ## [1] &quot;The mean value of Petal.Length is 3.76&quot; ## [1] &quot;The mean value of Petal.Width is 1.2&quot; Brainteaser : And what is the class() of i now? integer (numeric) 6.4.2 With saving values vector &lt;- c(&quot;Sepal.Length&quot;, &quot;Sepal.Width&quot;, &quot;Petal.Length&quot;, &quot;Petal.Width&quot;) means &lt;- rep(NA, length(vector)) # create &quot;empty&quot; vector to fill for(i in 1:length(vector)){ print(paste(&quot;The mean value of&quot;, vector[i], &quot;is&quot;, round(mean(iris[ , vector[i]]), 2))) means[i] &lt;- round(mean(iris[ , vector[i]]), 2) } ## [1] &quot;The mean value of Sepal.Length is 5.84&quot; ## [1] &quot;The mean value of Sepal.Width is 3.06&quot; ## [1] &quot;The mean value of Petal.Length is 3.76&quot; ## [1] &quot;The mean value of Petal.Width is 1.2&quot; 6.4.3 Exercise: Seminar Data Please download an edited version of our seminar data from ILIAS. You will find it under data as a zip folder. The dataset in it should have “.Rds” as a file ending. Read it in using: seminar &lt;- readRDS(&quot;./data/seminar_data.Rds&quot;) Create a for-loop that saves the means of age, body height and technological skill from that seminar data in a vector named “seminar_means”. Hint: I renamed the variables to make them nicer to work with, so check out names(seminar)! 6.4.4 Solution vector &lt;- c(&quot;v02_age&quot;, &quot;v04_bodyheight&quot;, &quot;v05_skill_tech&quot;) seminar_means &lt;- rep(NA, length(vector)) # create &quot;empty&quot; vector to fill for(i in 1:length(vector)){ seminar_means[i] &lt;- round(mean(seminar[ , vector[i]]), 2) } 6.4.5 Checking What’s Going On 6.4.5.1 browser() In order to break our loop and enter a “debugging” mode, we can add browser() to any loop like so: vector &lt;- c(&quot;v02_age&quot;, &quot;v04_bodyheight&quot;, &quot;v05_skill_tech&quot;) seminar_means &lt;- rep(NA, length(vector)) # create &quot;empty&quot; vector to fill for(i in 1:length(vector)){ seminar_means[i] &lt;- round(mean(seminar[ , vector[i]]), 2) browser() } The loop will run the first iteration until browser is called and then pause It allows you to check in the console whether all variables look the way you want them to without having to wait for the loop to run Or if there are errors/ warnings, you can check when they occur by moving the browser() to a different location in the code To continue with the next iteration while in browser, type “c” into the console, “Q” to quit The Esc key will also terminate the browser Make sure you exit it before continuing with anything else 6.5 Loop with Conditional In our seminar data, the average body height is 167.23 cm. We want to create a loop that goes through all rows (all seminar students) and outputs their height and whether it is above or below average. What do we need for that? 6.5.1 Elements For each person: Check if their body height is above average If yes: Output “This person is taller than average with …” Else: Output “This person is less tall than average with…” Then paste the person’s body height Loop that over each person! 6.5.2 Solution for(i in 1:nrow(seminar)){ if(seminar$v04_bodyheight[i] &gt; mean(seminar$v04_bodyheight)) { print(paste(&quot;This person is taller than average with&quot;, seminar$v04_bodyheight[i], &quot;cm.&quot;)) } else { print(paste(&quot;This person is less tall than average with&quot;, seminar$v04_bodyheight[i], &quot;cm.&quot;)) } } ## [1] &quot;This person is taller than average with 168 cm.&quot; ## [1] &quot;This person is less tall than average with 160 cm.&quot; ## [1] &quot;This person is taller than average with 171 cm.&quot; ## [1] &quot;This person is less tall than average with 166 cm.&quot; ## [1] &quot;This person is taller than average with 169 cm.&quot; ## [1] &quot;This person is less tall than average with 164 cm.&quot; ## [1] &quot;This person is less tall than average with 161 cm.&quot; ## [1] &quot;This person is less tall than average with 166 cm.&quot; ## [1] &quot;This person is taller than average with 183 cm.&quot; ## [1] &quot;This person is taller than average with 172 cm.&quot; ## [1] &quot;This person is less tall than average with 160 cm.&quot; ## [1] &quot;This person is less tall than average with 164 cm.&quot; ## [1] &quot;This person is taller than average with 170 cm.&quot; 6.5.3 And a more complicated outlook… 6.5.3.1 What happens here? for(i in 1:nrow(seminar)){ if(seminar$v11_soul[i] == &quot;yes&quot;){ # Check soul belief text1 &lt;- &quot;This person belives in the soul and&quot; } else if (seminar$v11_soul[i] == &quot;no&quot;) { text1 &lt;- &quot;This person does not belive in the soul and&quot; } else { text1 &lt;- &quot;This person is unsure about the soul and&quot; } if(seminar$v12_soul_phil[i] == &quot;monism&quot;){ # Check mind-body-philosophy text2 &lt;- &quot;believes the m-b-relationship is monistic.&quot; } else if (seminar$v12_soul_phil[i] == &quot;dualism&quot;) { text2 &lt;- &quot;believes the m-b-relationship is dualistic.&quot; } else { text2 &lt;- &quot;is unsure of the m-b-relationship.&quot; } print(paste(text1, text2)) # Print text } 6.5.4 Result ## [1] &quot;This person belives in the soul and believes the m-b-relationship is dualistic.&quot; ## [1] &quot;This person belives in the soul and is unsure of the m-b-relationship.&quot; ## [1] &quot;This person belives in the soul and believes the m-b-relationship is monistic.&quot; ## [1] &quot;This person is unsure about the soul and is unsure of the m-b-relationship.&quot; ## [1] &quot;This person belives in the soul and is unsure of the m-b-relationship.&quot; ## [1] &quot;This person does not belive in the soul and believes the m-b-relationship is monistic.&quot; ## [1] &quot;This person is unsure about the soul and is unsure of the m-b-relationship.&quot; ## [1] &quot;This person is unsure about the soul and is unsure of the m-b-relationship.&quot; ## [1] &quot;This person does not belive in the soul and is unsure of the m-b-relationship.&quot; ## [1] &quot;This person belives in the soul and believes the m-b-relationship is monistic.&quot; ## [1] &quot;This person is unsure about the soul and believes the m-b-relationship is dualistic.&quot; ## [1] &quot;This person belives in the soul and believes the m-b-relationship is dualistic.&quot; ## [1] &quot;This person is unsure about the soul and is unsure of the m-b-relationship.&quot; 6.6 Wrap-Up &amp; Further Resources For-Loops must have a defined sequence to run over, e.g. 1 to 4 For-loops are the most common in R and are fit for most tasks Loops are a powerful tool to e.g. easily perform the same task many times Conditionals give you control over different operations depending on your data In combination, loops and conditionals are most useful Don’t forget to play and create fun loops! For loops (W3 Schools) For loops (R bloggers) For loops (DataMentor) Here are also links the the other types of loop and a visualization Loops in R (datacamp)Very thorough! :) dplyr Exercises Great to keep practicing over the holidays :) Lightbot For Loop Meme "],["into-the-tidyverse-pretty-plots-with-ggplot2.html", "Chapter 7 Into the tidyverse: Pretty plots with ggplot2 7.1 Data Visalization 7.2 What is ggplot2? 7.3 Example: Basic Bar Plot 7.4 Adding labels and themes 7.5 Bivariate Visualizations 7.6 Wrap-Up &amp; Further Resources 7.7 Thank you!", " Chapter 7 Into the tidyverse: Pretty plots with ggplot2 7.1 Data Visalization What is data visualization? When and why do we need it? What do we want to accomplish? 7.1.1 Data Viz has many many applications Our readers/ listeners can follow us better with data viz Statistics are much easier to understand with a visual representation Mostly, we want to be able to see our data ¯\\_(ツ)_/¯ Having a visual representation can be helpful in understanding relationships between variables Many common statistics make assumptions about the distribution of our data, so we need to check/test that! 7.1.2 Example: Sine &amp; Cosine …are trigonometric angle functions with a special relationship This relationship cannot be found with common statistics - the correlation Data Viz helps us not to make wrong assumptions about our data! 7.2 What is ggplot2? Probably the best data visualization package in R Powerful tool for visualizing data Part of the tidyverse ♥ library(ggplot2) 7.2.1 Most important ggplot2 functions 7.2.1.1 ggplot() The main function for “opening the canvas” This function prepares R for the plot definition Commonly, we define the data set and which variables to plot in this function Needs the aesthetics function aes() as input It’s important to remember that the package is called ggplot2 while the function call is ggplot! 7.2.2 geom_XYZ() Defines the actual type of plot = geometric objects When data is pre-defined, this function does not need additional input Can handle some “pretty makers”, such as alpha, which defines color opacity geom_bar, geom_boxplot, geom_density, geom_jitter, geom_histogram 7.3 Example: Basic Bar Plot ggplot(iris) + geom_bar(aes(x = Petal.Width)) 7.3.1 Making Plots Prettier color visual property of the geometric object which color for the outlines colors() fill visual property of the geometric object which color to fill labs theme install.packages(\"papaja\") \\(\\rightarrow\\) library(papaja) 7.3.2 Example: Bar Plot with color and fill ggplot(iris) + geom_bar(aes(x = Petal.Width), color = &quot;deepskyblue3&quot;, fill = &quot;deepskyblue&quot;) What could cause this distribution? 7.3.3 Example: Bar Plot with color and fill ggplot(iris) + geom_bar(aes(x = Petal.Width, color = Species, fill = Species)) What do you notice about the code compared to before? 7.3.4 Static vs. Dynamic Aesthetics Static Aesthetics: Fixed values applied to all elements of the plot Example: color = “deepskyblue3” Means every element will have the same color. Dynamic Aesthetics: These map a variable in your data to an aesthetic, which allows different elements to have different colors based on the data Example: aes(color = Species) Means the color will vary according to the Species variable in the data set. 7.3.5 Exercise Create a density plot that shows Sepal.Length from the iris data set. Fill in the color depending on the Species and color the outlines with “white”. Make sure everything is visible and legible, so try to use an alpha of around 0.6. ggplot(data) + geom_XYZ(aes(), alpha = ?) 7.3.6 Solution ggplot(iris) + geom_density(aes(x = Sepal.Length, fill = Species), color = &quot;white&quot;, alpha = .6) 7.4 Adding labels and themes A good plot should be self explanatory and clear We need labels to tell others what our plot shows Especially when using color for another variable, it needs to be clear what each color means Also the gray-ish default background is ok, but neither very pretty nor very clear It is sometimes advisable to keep grid lines visible, but sometimes they can be distracting and unnecessary ggplot2 has a lot of built-in theme options, but there are many packages that provide their own themes Usually my preference is papaja::theme_apa(), which adheres to APA guidelines 7.4.1 Same example with added theme ggplot(iris) + geom_bar(aes(x = Petal.Width, color = Species, fill = Species)) + theme_apa() What labels should we use in this plot? 7.4.2 Same example with added theme and labels ggplot(iris) + geom_bar(aes(x = Petal.Width, color = Species, fill = Species)) + theme_apa() + labs(x = &quot;Petal Width&quot;, y = &quot;Flower Count&quot;, title = &quot;Size of Iris Flowers&quot;) 7.5 Bivariate Visualizations The bar plot shows the distribution of a single variable We can add color to show groups Showing the relationship of two variables to each other is crucial for understanding our data We can still add color to make existing groups clearer or add a third variable For a broad overview of which visualization (and statistic) to use for which type of data, visit the Statistics Picker (currently only available in German) Most common are boxplots, scatterplots &amp; line graphs 7.5.1 Boxplot Example As suggested by one of you, we will look at the relationship of preferred music genre and music volume in our course: # seminar &lt;- readRDS(&quot;./data/seminar_data.Rds&quot;) ggplot(seminar, aes(x=v07_genre, y=v08_loudness, colour=v07_genre, fill=v07_genre)) + geom_boxplot(alpha = 0.7) + theme_apa() + labs(x = &quot;Preferred Music Genre&quot;, y = &quot;Loudness (arbitrary units)&quot;, color = &quot;Genre&quot;, fill = &quot;Genre&quot;) 7.5.2 Exercise: Boxplot Create a box plot that shows Sepal.Length from the iris data set grouped by the Species. Fill and color depending on the Species. Make sure everything is visible and legible, so try to use an alpha of around 0.7. Try to add labels and a theme. 7.5.3 Solution: Boxplot ggplot(iris) + geom_boxplot(aes(x = Species, y = Sepal.Length, color = Species, fill = Species), alpha = .6) + theme_minimal() + labs(x = &quot;Species&quot;, y = &quot;Sepal Length&quot;) 7.5.4 Inspiration: colors and palettes These plots have all used the default colors from ggplot2 There are many options for customization, either: Use the “brewer” palettes from ggplot2 with scale_color_brewer() or scale_fill_brewer() Choose single colors (static aesthetics), check colors() for R color names Create a color palette with all colors that you need and use it with scale_color_manual() or scale_fill_manual() Use a predefined color palette from packages like viridis or unikn or RColorBrewer… Have fun with it! 7.5.5 Use: colors and palettes Showing plots together like this is easy with cowplot::plot_grid()! 7.6 Wrap-Up &amp; Further Resources ggplot2 is a powerful tool for visualizing data Plot commands are added together with + and executed as one A basic plot is created with ggplot() + geom_XYZ(), e.g. geom_bar color &amp; fill give you nice color options (static &amp; dynamic) labs() adds labels to the plot (i.e. x, y, title, …) Themes control the background of the plot, e.g. papaja::theme_apa() or theme_minimal() Color palettes are a great way of elevating a visualization ggplot2 vignette R Graphics Cookbook unikn viridis papaja Beautiful Plotting Guide Very extensive, I still profit from this guide a lot :) More color palettes explained 7.7 Thank you! "],["creating-and-interpreting-statistics-chi2-t-test-anova.html", "Chapter 8 Creating and interpreting statistics: Chi\\(^2\\) &amp; t-test &amp; ANOVA 8.1 Statistics Re-cap I 8.2 \\(\\chi^2\\) 8.3 t-Test 8.4 ANOVA 8.5 Reporting with the apa &amp; papaja packages 8.6 Wrap-Up &amp; Further Resources 8.7 Homework: R Markdown 8.8 Thank you!", " Chapter 8 Creating and interpreting statistics: Chi\\(^2\\) &amp; t-test &amp; ANOVA Re-cap of statistics: t-test, Chi\\(^2\\) and ANOVA Learn how to calculate in R Learn how to check assumptions Go over examples (inspired by your thesis analyses ) 8.1 Statistics Re-cap I What do you remember from statistics: What is Chi\\(^2\\) / \\(\\chi^2\\)? What is the t-test? What is an ANOVA? What do they have in common &amp; what differentiates them? 8.1.1 Statistics Re-cap II They measure group differences \\(\\chi^2\\) \\(\\rightarrow\\) nominal data t-Test \\(\\rightarrow\\) one or two groups with a continuous attribute ANOVA \\(\\rightarrow\\) three or more groups with one (or more) continuous attribute(s) 8.1.2 Pre-Requisites Load the seminar data using seminar &lt;- readRDS(\"./data/seminar_data.Rds\") Please make sure you are using the R dataset from the zip folder in ILIAS, not the original csv file we first used! Add a “dummy variable” (only two possible values 0 and 1) for believing in a soul, where 1 means yes and 0 means no or unsure seminar$soul_dummy &lt;- ifelse(seminar$v11_soul == \"yes\", 1, 0) 8.2 \\(\\chi^2\\) \\(\\chi^2\\) Test for Independence: Determines if there is an association between two categorical variables in a contingency table compares the observed frequencies in each category of a contingency table to the frequencies expected if the variables were independent k 8.2.1 Calculation: \\[\\chi^2 = \\sum \\frac{(O_i - E_i)^2}{E_i}\\] \\(O_i\\) is the observed frequency in each category \\(E_i\\) is the expected frequency in each category, calculated as: \\[E_i = \\frac{(row \\ total) \\times (column \\ total)}{grand \\ total}\\] Example: Believing in the soul by gender ## ## 0 1 Sum ## man 1 1 2 ## woman 6 5 11 ## Sum 7 6 13 8.2.2 How to in R The chisq.test() function only needs (categorical!) x, y as input Especially with a small sample, we can add the parameter simulate.p.value = T, which bootstraps the analysis 2000 times chisq.test(seminar$v01_gender, seminar$soul_dummy, simulate.p.value = T) ## ## Pearson&#39;s Chi-squared test with simulated p-value (based on 2000 ## replicates) ## ## data: seminar$v01_gender and seminar$soul_dummy ## X-squared = 0.014069, df = NA, p-value = 1 8.2.3 Exercise We want to explore whether belief in the soul (dummy) is associated with music preference. Calculate a simple chisq.test and interpret the results. 8.2.4 Solution chisq.test(seminar$v07_genre, seminar$soul_dummy) ## Warning in chisq.test(seminar$v07_genre, seminar$soul_dummy): Chi-squared ## approximation may be incorrect ## ## Pearson&#39;s Chi-squared test ## ## data: seminar$v07_genre and seminar$soul_dummy ## X-squared = 2.1357, df = 2, p-value = 0.3437 addmargins(table(seminar$v07_genre, seminar$soul_dummy)) ## ## 0 1 Sum ## pop 2 3 5 ## rock 3 3 6 ## techno 2 0 2 ## Sum 7 6 13 Interpretation? 8.3 t-Test There are 3 broad categories of t-test: one-sample t-test: Test one sample against a known mean value two-sample t-test (independent): Test two sample-means against each other (independent samples) paired two-sample t-test: Test two dependent sample-means against each other (e.g. repeated measures) 8.3.1 Test statistic t Test statistic T has a known distribution that depends on the degrees of freedom, calculated as n-1 Most (probable) T values are around 0 The further away the T value is from 0, the less likely it is caused by chance alone \\(\\rightarrow\\) significance T distribution 8.3.2 Test statistic t One sample: \\[ t = \\frac{\\bar{X} - \\mu}{\\frac{s}{\\sqrt{n}}} \\] Two sample: \\[t = \\frac{\\bar{X}_1 - \\bar{X}_2}{\\sqrt{\\frac{s_1^2}{n_1} + \\frac{s_2^2}{n_2}}} \\] 8.3.3 How to in R The basic function is t.test() for any type of t.test One sample needs inputs x, mu (if x is from a data set you should specify data) Two sample needs either x, y (if from data set, data) or x ~ group (if from data set, data) Paired test needs paired = T One-sided test needs alternative = ‘greater’ (assumes first group mean to be larger than second; otherwise “less”) 8.3.4 Examples # One sided - &quot;greater&quot; assumes that mean(x) is larger than mean(y) t.test(x = 10:20, y = 0:10, alternative = &quot;greater&quot;) ## ## Welch Two Sample t-test ## ## data: 10:20 and 0:10 ## t = 7.0711, df = 20, p-value = 3.713e-07 ## alternative hypothesis: true difference in means is greater than 0 ## 95 percent confidence interval: ## 7.56088 Inf ## sample estimates: ## mean of x mean of y ## 15 5 # Two sided using formula ~ Does seminar motivation differ # depending on the soul-belief of students? t.test(v10_motivation ~ soul_dummy, data = seminar) ## ## Welch Two Sample t-test ## ## data: v10_motivation by soul_dummy ## t = 0.1625, df = 6.833, p-value = 0.8756 ## alternative hypothesis: true difference in means between group 0 and group 1 is not equal to 0 ## 95 percent confidence interval: ## -31.14063 35.71206 ## sample estimates: ## mean in group 0 mean in group 1 ## 68.28571 66.00000 8.3.5 Exercise We want to test whether the gender stereotype that men are more skilled with technology appears in our seminar sample. Perform a one-sided two-sample t-test and interpret the results. Hint: The grouping variable “v01_gender” is sorted alphabetically - so choose the “alternative” accordingly! 8.3.6 Solution t.test(v05_skill_tech ~ v01_gender, data = seminar, alternative = &quot;greater&quot;) ## ## Welch Two Sample t-test ## ## data: v05_skill_tech by v01_gender ## t = 0.38715, df = 1.2774, p-value = 0.3766 ## alternative hypothesis: true difference in means between group man and group woman is greater than 0 ## 95 percent confidence interval: ## -109.5565 Inf ## sample estimates: ## mean in group man mean in group woman ## 46.5 36.0 Interpretation? There are no significant gender differences in technological skill. 8.4 ANOVA ANOVA principle Like a t-test for more than two groups Why do we not just calculate several t-tests? \\(\\alpha\\) inflation! Significance level of 0.05 means that 1/20 tests will be significant by pure chance, so more tests makes it more likely that we hit that chance and make an alpha error (falsely reject null hypothesis) 8.4.1 How to - theoretically Check Assumptions Data should be normally distribution &amp; variance in groups should be similar (homogeneous) Sum of Squares: Sum of Squares total, within &amp; between (R does this for us) F-fraction as the measure of variance explained by the grouping variable in comparison to other variability in the dependent variable Interpretation and post-hoc tests If there are any significant differences at all, we can use pairwise t-tests (with alpha correction!) 8.4.2 Example: Music genre and loudness 8.4.2.1 1. Check assumptions Check for Homogeneity of Variance with the Levene Test # Make sure the package &quot;car&quot; is installed first! If not, install.packages(&quot;car&quot;) # as.factor() forces R to recognize our group as such! car::leveneTest(v08_loudness ~ as.factor(v07_genre), data = seminar, center = mean) ## Levene&#39;s Test for Homogeneity of Variance (center = mean) ## Df F value Pr(&gt;F) ## group 2 0.1729 0.8437 ## 10 Interpretation? p value &lt; 0.05 would indicate significant differences in variance between the group, so we want it to be &gt; 0.05 Assumption met! 8.4.2.2 2. Define the overall model model &lt;- aov(v08_loudness ~ as.factor(v07_genre), data = seminar) summary(model) # &quot;Pr(&gt;F)&quot; is the p-value ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## as.factor(v07_genre) 2 618.9 309.4 2.562 0.126 ## Residuals 10 1208.0 120.8 Interpretation? Not significant (likely due to small sample size) usually we would stop here then, but we will look at the post hoc tests anyway ;) 8.4.2.3 3. Post Hoc Test TukeyHSD(model) ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = v08_loudness ~ as.factor(v07_genre), data = seminar) ## ## $`as.factor(v07_genre)` ## diff lwr upr p adj ## rock-pop 12.566667 -5.677791 30.81112 0.1922467 ## techno-pop 17.400000 -7.808341 42.60834 0.1911143 ## techno-rock 4.833333 -19.767489 29.43416 0.8544384 Interpretation? There are no significant pairwise differences in our (small) sample. But we can simulate a larger sample (for fun) 8.4.3 Addendum for demonstration only: Bootstrapped Data for larger sample size data &lt;- data.frame() for(i in 1:10){ boot &lt;- seminar[sample(1:nrow(seminar), nrow(seminar), replace = T), ] data &lt;- rbind(data, boot) # create many random samples from our data } bootstrapped_model &lt;- aov(v08_loudness ~ as.factor(v07_genre), data = data) summary(bootstrapped_model) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## as.factor(v07_genre) 2 7345 3672 47.76 3.42e-16 *** ## Residuals 127 9766 77 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 TukeyHSD(bootstrapped_model) ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = v08_loudness ~ as.factor(v07_genre), data = data) ## ## $`as.factor(v07_genre)` ## diff lwr upr p adj ## rock-pop 14.238278 10.307525 18.169030 0.0000000 ## techno-pop 17.624242 11.977093 23.271392 0.0000000 ## techno-rock 3.385965 -2.236703 9.008633 0.3295653 8.5 Reporting with the apa &amp; papaja packages You know the papaja package already for theme_apa() in data visualization The package also has many wrapper functions to make reporting in R &amp; R Markdown a lot easier “apa_print()” Chi\\(^2\\) Test reporting cannot be achieved with this, so we use apa::chisq_apa() for that 8.5.1 Usage # Chi (add format = &quot;rmarkdown&quot; if needed) apa::chisq_apa(chisq.test(seminar$v07_genre, seminar$soul_dummy)) ## Warning in chisq.test(seminar$v07_genre, seminar$soul_dummy): Chi-squared ## approximation may be incorrect ## chi^2(2) = 2.14, p = .344 # t-test papaja::apa_print(t.test(v05_skill_tech ~ v01_gender, data = seminar, alternative = &quot;greater&quot;))$full_result ## [1] &quot;$\\\\Delta M = 10.50$, 95\\\\% CI $[-109.56, \\\\infty]$, $t(1.28) = 0.39$, $p = .377$&quot; # ANOVA papaja::apa_print(model)$full_result ## For one-way between subjects designs, generalized eta squared is ## equivalent to eta squared. Returning eta squared. ## $as_factorv07_genre ## [1] &quot;$F(2, 10) = 2.56$, $p = .126$, $\\\\hat{\\\\eta}^2_G = .339$, 90\\\\% CI $[.000, .602]$&quot; 8.5.2 Usage in R Markdown This presentation is based on R Markdown, so we can make use of the pretty printing options right here By using apa_print(model)$full_result, we can automatically report results inside our documents: “In our sample, ANOVA showed no significant differences between preferred music genre and preferred volume of listening to music (\\(F(2, 10) = 2.56\\), \\(p = .126\\), \\(\\hat{\\eta}^2_G = .339\\), 90% CI \\([.000, .602]\\)). However, bootstrapping with 10 repetitions suggests that this lack of evidence might be due to the small sample size (\\(F(2, 127) = 47.76\\), \\(p &lt; .001\\)), which is also supported by the large effect size (\\(\\hat{\\eta}^2_G = .429\\), 90% CI \\([.322, .516]\\)).” 8.6 Wrap-Up &amp; Further Resources Chi\\(^2\\) test measures association between two categorical variables t Test measures differences between mean values (one sample, two sample, paired) ANOVA can be thought of as an augmentation of the t test while controlling alpha inflation Functions: chisq.test(), t.test(), aov() Always try to imagine/ keep in mind what you might expect and what the data would be like if that were true Read the documentation of each function for more options Statistics Picker Chi2-test (Statology) t-test (Statology) ANOVA (Statology) 8.7 Homework: R Markdown Some of you are already somewhat familiar with R Markdown. For those of you who are not, please create a demo RMarkdown document and “knit” it. … or go to File &gt; New File &gt; R Markdown to create a new Rmd document. Give it a name or keep all the defaults. It will create a document with some demo content. When you click the “knit”-button below the main menu, you will need to save the file and it will create the output. Try to play around with the text and read the demo content - it explains the basic functions! 8.8 Thank you! Cute ANOVA curves "],["creating-and-interpreting-statistics-correlation-regression.html", "Chapter 9 Creating and interpreting statistics: correlation &amp; regression 9.1 Statistics Re-cap 9.2 Correlation 9.3 Correlation in R 9.4 Linear Regression 9.5 ANOVA Exercise 9.6 Wrap-Up &amp; Further Resources 9.7 Thank you!", " Chapter 9 Creating and interpreting statistics: correlation &amp; regression 9.1 Statistics Re-cap What is a correlation? What is the general linear model, a.k.a. regression model? What do they have in common? What makes them different? They both give us measures of association The association can be positive (the larger x, the larger y) or negative (the larger x, the smaller y) Correlation does not imply causation Correlation coefficient r only tells us about association, nothing about causal relation Regression model can check whether Y changes on the basis of X 9.1.1 Pre-Requisites Load the seminar data using Please make sure you are using the R dataset from the zip folder in ILIAS, not the original csv file we first used! seminar &lt;- readRDS(&quot;./data/seminar_data.Rds&quot;) # the filepath might need adjustment for you Some of you were having trouble loading the data - please repeat the different types of data in R and the different commands used to load them! (from week 6) Who is having trouble opening the slides as HTML? 9.2 Correlation The pearson correlation coefficient r measures association between two numeric variables The variables need to be continuous &amp; interval-scaled be normally distributed &amp; should have no outliers have a linear relationship Its range is from -1 to 1 The closer to 0, the weaker the correlation 9.2.1 Guess the correlation! r = 0.3 9.3 Correlation in R Two main functions: cor() calculates the correlation cor.test() calculates correlation and significance As input they both need only an x and a y variable You can specify some other aspects of the calculation, such as statistical method (e.g. “spearman”) or how to deal with missing data 9.3.1 Example x &lt;- 1:10 y &lt;- sample(x, 10) cor(x, y) ## [1] 0.1272727 cor.test(x, y) ## ## Pearson&#39;s product-moment correlation ## ## data: x and y ## t = 0.36293, df = 8, p-value = 0.7261 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## -0.5461162 0.7007453 ## sample estimates: ## cor ## 0.1272727 9.3.2 Handling missing data Many functions have an option for missing data or NAs You can often add the argument na.rm = TRUE to a function for “NA remove” In the cor() function, we define to only use complete observations k &lt;- c(1, 2, 3, 4, 5) m &lt;- c(1, 3, 2, 5, NA) # same length but 1 data point is missing cor(k, m) ## [1] NA 9.3.3 Handling missing data With use = \"complete.obs\" we define to only use pairs of observations that are not missing cor(k, m, use = &quot;complete.obs&quot;) ## [1] 0.8315218 cor(k[1:4], m[1:4]) ## [1] 0.8315218 9.3.4 Exercise: 9.3.4.1 Is technology skill associated with seminar motivation? Calculate a correlation test using cor.test() to analyze the question. Try to formulate an interpretation as you would report it in a thesis or paper! 9.3.5 Solution cor.test(seminar$v05_skill_tech, seminar$v10_motivation) ## ## Pearson&#39;s product-moment correlation ## ## data: seminar$v05_skill_tech and seminar$v10_motivation ## t = 1.386, df = 11, p-value = 0.1932 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## -0.2100186 0.7724602 ## sample estimates: ## cor ## 0.3855856 “With r = 0.386 there is a positive association of moderate strength between previous technological skill and motivation for the seminaR. This association is not significant (p = 0.193), likely due to the small sample size.” 9.3.6 Quiz 9.3.6.1 Look at our seminar dataset by entering str(seminar) in the console. Which of these correlations would work? cor(seminar$v02_age, seminar$v04_bodyheight Closing bracket missing! cor(seminar$v02_age, seminar$v08_loudness) cor(seminar$v08_loudness, seminar$v06_loc) v06_loc has numbers, but they are recognized as characters! 9.4 Linear Regression Linear regression also works on numerical, normally distributed data We assume an association, and regression can help to look for causation There is one dependent variable y and one independent variable x In multiple linear regression, there can be several x Formula: \\[ y = \\beta_0 + \\beta x + \\epsilon \\] What we are essentially doing is building a model for our data and checking how well it actually fits! 9.4.1 Build the model The R function for regression analysis is lm() for linear model It needs a “formula” as input - similar to the formula in the t.test(), we need the ~ Read Y ~ X as “Y on the basis of/ given X” Our dependent variable Y goes first and our independent variable(s) go after the ~ If the variables come from a data set, we need to specify data as well 9.4.2 Visual Inspection ggplot(Orange, aes(x = age, y = circumference, color = age)) + geom_jitter(size = 3) + geom_smooth(method = &quot;lm&quot;, se=FALSE, color=&quot;lightgray&quot;, linewidth = .7, formula = y ~ x) + theme_minimal() + labs(x = &quot;Tree Age&quot;, y = &quot;Trunk Circumference&quot;, title = &quot;Do trees get thicker with age?&quot;) + scale_color_distiller(palette = 7) + theme(legend.position = &quot;none&quot;) What could be problematic here? Heteroscedasticity 9.4.3 Build the model 9.4.3.1 Do trees get thicker with age? Treelm &lt;- lm(formula = circumference ~ age, data = Orange) Treelm ## ## Call: ## lm(formula = circumference ~ age, data = Orange) ## ## Coefficients: ## (Intercept) age ## 17.3997 0.1068 The lm alone gives us the mathematical formula To look at the statistical results, we need to use another function such as print() or summary() 9.4.4 Analyze the model summary(Treelm) ## ## Call: ## lm(formula = circumference ~ age, data = Orange) ## ## Residuals: ## Min 1Q Median 3Q Max ## -46.310 -14.946 -0.076 19.697 45.111 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 17.399650 8.622660 2.018 0.0518 . ## age 0.106770 0.008277 12.900 1.93e-14 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 23.74 on 33 degrees of freedom ## Multiple R-squared: 0.8345, Adjusted R-squared: 0.8295 ## F-statistic: 166.4 on 1 and 33 DF, p-value: 1.931e-14 Interpretation? Trees get larger circumferences the older they are, but this might be modulated by their Species, environment or other factors 9.4.5 Exercise Does the age of a person have an influence on how long they took to complete the seminar survey (session length)? Use the lm() function and report the significance level of the predictor as well as the model equation. 9.4.6 Solution age_sess &lt;- lm(session_length ~ v02_age, data = seminar) summary(age_sess) ## ## Call: ## lm(formula = session_length ~ v02_age, data = seminar) ## ## Residuals: ## Min 1Q Median 3Q Max ## -34.978 -5.605 1.209 13.395 36.141 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 182.706 61.517 2.970 0.0127 * ## v02_age -4.186 2.689 -1.557 0.1478 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 21.23 on 11 degrees of freedom ## Multiple R-squared: 0.1805, Adjusted R-squared: 0.106 ## F-statistic: 2.423 on 1 and 11 DF, p-value: 0.1478 9.4.7 Interpretation “The age of a person does not significantly predict the time it took them to complete the survey (p = .148). The model equation is 182.7 -4.19X with age explaining about 18% of the variance in session length for the survey.” 9.4.8 A word to the wise There is also a function called glm() for general linear model In the cases I showed you, both perform the same tasks The glm() can also handle other more advanced statistical analyses, including logistic regression However, the lm() function will output the coefficient of determination \\(R^2\\) It tell us the proportion of the variation in the dependent variable that is predictable from the independent variable(s) We could also calculate it by hand using the cor() function and squaring the result 9.5 ANOVA Exercise Reminder: There are generally 3 steps to an ANOVA car::leveneTest(v08_loudness ~ v11_soul, data = seminar) # 1. model &lt;- aov(v08_loudness ~ v11_soul, data = seminar) # 2. summary(model) TukeyHSD(model) # 3. Check assumptions with Levene Test Build the model to perform an omnibus ANOVA Perform post-hoc tests to check pairwise differences (usually only if the omnibus ANOVA is significant) 9.5.1 Exercise: 9.5.1.1 Does the preferred music volume depend on someone’s soul philosophy? Perform an ANOVA on our seminar data to explore the question (v08 &amp; v12). Look for pairwise differences even if the overall ANOVA does not reach significance. 9.5.2 Solution car::leveneTest(v08_loudness ~ v12_soul_phil, data = seminar) ## Warning in leveneTest.default(y = y, group = group, ...): group coerced to ## factor. ## Levene&#39;s Test for Homogeneity of Variance (center = median) ## Df F value Pr(&gt;F) ## group 2 0.3112 0.7394 ## 10 model &lt;- aov(v08_loudness ~ v12_soul_phil, data = seminar) summary(model) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## v12_soul_phil 2 1164.8 582.4 8.797 0.00625 ** ## Residuals 10 662.1 66.2 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 9.5.3 Solution 9.5.3.1 Pairwise Comparison TukeyHSD(model) ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = v08_loudness ~ v12_soul_phil, data = seminar) ## ## $v12_soul_phil ## diff lwr upr p adj ## dunno-dualism 9.714286 -5.678116 25.106687 0.2419042 ## monism-dualism -13.666667 -31.879202 4.545868 0.1490289 ## monism-dunno -23.380952 -38.773354 -7.988551 0.0049965 9.5.4 If there is still time: Choose and create an appropriate visualization for this data! 9.5.5 Data Viz ggplot(seminar, aes(x = v12_soul_phil, y = v08_loudness, color = v12_soul_phil, fill = v12_soul_phil)) + geom_boxplot(alpha = .7) + theme_minimal() + theme(legend.position = &quot;none&quot;) + labs(x = &quot;Soul Philosophy&quot;, y = &quot;Preferred Volume (arbitrary units)&quot;) + scale_color_brewer(palette = 4) + scale_fill_brewer(palette = 4) 9.6 Wrap-Up &amp; Further Resources Correlation coefficient r can be determined using cor(x,y) \\(R^2\\) is the coefficient of determination in a linear model (calculate by hand or in the model formula) The linear model function lm() is used to build models for linear regression Problems such as overfitting or heteroscedasticity reduce the interpretability of the model results Guess the Correlation Explanation: Correlation Linear Regression in R lm() cheatsheet 9.7 Thank you! ggplot(Orange, aes(x = age, y = circumference, color = Tree)) + geom_point(size = 3) + labs(x = &quot;Tree Age&quot;, y = &quot;Trunk Circumference&quot;) + geom_line(aes(color = Tree)) + theme_minimal() + theme(legend.position = &quot;none&quot;) "],["intro-to-r-markdown.html", "Chapter 10 Intro to R Markdown 10.1 Creating whole documents in R 10.2 Document Basics 10.3 ## Heading Basics 10.4 Special Features 10.5 Including R 10.6 Wrap-Up &amp; Further Resources 10.7 Thank you!", " Chapter 10 Intro to R Markdown R Markdown Logo 10.1 Creating whole documents in R Creating visualizations and statistics in R is great, but we need to able to show and report our work. Results can be copied and plots can be exported, but they can also be embedded directly into a document in R R Markdown is a text engine based on \\(\\LaTeX\\) that allows you to create documents, presentations, reports… MA thesis Example 10.1.1 Example You’ve hopefully all tried out creating your own R Markdown document as homework We’ll all create a new RMarkdown document now and augment that as we go on with this class! … or go to File &gt; New File &gt; R Markdown to create a new markdown document Let’s try that out! 10.2 Document Basics RMarkdown has some basics that need to be learned It also has many features and powerful tools for layout and styling By default, RMarkdown can create html documents - if you want a pdf, you need a special package to render \\(\\LaTeX\\), I recommend tinytex install.packages(\"tinytex\") tinytex::install_tinytex() 10.2.1 YAML header (Yet Another Markdown Language) This defines the output format of our document, e.g. html_document We can set our title, subtitle, author, date… We can define further characteristics, e.g. toc (table of content) or self-contained (this should be set to true, otherwise R will not copy images etc. and the document will not work properly on other devices) The YAML header needs to be indented in a certain way, otheriwse the commands are not recognized! In the YAML header, true and false are not capitalized, unlike in the rest of R! 10.2.2 Markdown Basics Text formatting generally works with characters in the text: italics with _italics_ bold with **bold** bold and cursive with **_bold and cursive_** Unordered lists are created with - Ordered lists with 1., 2. … 10.3 ## Heading Basics 10.3.1 ### Sub Header 3. level 10.3.1.1 #### 4th level 10.3.1.1.1 ##### 5th level 10.3.1.1.1.1 ###### 6th level Thats’s it. Realistically, we may want to go down to the 4th level heading, but usually no further. 10.4 Special Features Print mathematical equations Show code and its output Easily use automatic formatting Profit from existing templates General rule of thumb: Rmd documents are rendered depending on their output format If you plan on creating an html, you can use plain html to make adjustments and use special features. If you create a pdf, they will most likely not work and you should use \\(\\LaTeX\\) notation. 10.4.1 \\(\\LaTeX\\) Especially useful for writing equations: $ \\ alpha $ \\(\\rightarrow\\) \\(\\alpha\\) $ \\ beta $ \\(\\rightarrow\\) \\(\\beta\\) $ R^2 $ \\(\\rightarrow\\) \\(R^2\\) and, by the way, $ \\ rightarrow $ becomes \\(\\rightarrow\\) and $ \\ LaTeX $ becomes \\(\\LaTeX\\) \\ newline creates a new line and \\ newpage creates a new page 10.4.2 HTML Remember these tags should only be used when creating a html document! &lt; br &gt; creates a new line (stands for “line break”) &lt;span style=“color: purple;”&gt; This text will appear purple. &lt;/span&gt; This text will appear purple. Simple tables can be created with html notation in most documents Header 1 | Header 2 then a row of - - - | - - - to represent the lines And the content separated | into as many columns as defined 10.4.3 Table Example Header 1 | Header 2 —–|—– Great content | Fantastic content Becomes: Header 1 Header 2 Great content Fantastic content 10.5 Including R Including R code can be achieved by either inserting so-called code chunks or using inline code Code chunks are useful if several lines of code need to be evaluated and/ or shown There are many options for code chunks Inline code is useful if single outputs are to be shown E.g. with functions you already know such as apa_print() 10.5.1 Code Chunks Code chunks are inserted via the menu Code &gt; Insert Chunk and should look like this: ```{r} # code goes here ``` # code goes here Or you can use the keyboard shortcut ctrl + alt + i / command + option + i 10.5.2 Chunk Options Inside the curly brackets, you can specify many different options, for example: fig.height = 3 will output a plot to a certain height (3 inches) echo = F will show code output, but not the code eval = F will show the code, but not its’ output… eval = F: head(iris, 1) echo = F: ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa 10.5.3 Chunk Options: 10.5.3.1 error = TRUE This option allows us to include erroneous code in our script It will output the error message just like you would see in your R Studio console By default, error = FALSE which means that your script cannot be rendered with errors in code chunks mean(y) ## [1] 5.5 10.6 Wrap-Up &amp; Further Resources RMarkdown allows you to create professional documents You can use it like other text-generating programs (e.g. MS Word) Embed plots, code and statistical results directly in your document Show equations and use other special features YouTube: What is R Markdown? LaTeX Cheatsheet HTML Cheatsheet RMarkdown Cookbook RMarkdown Chunk Options YouTube: Presentations with Quarto 10.7 Thank you! Shakespeare writing RMarkdown "],["taking-full-advantage-of-r-and-r-markdown.html", "Chapter 11 Taking full Advantage of R and R Markdown 11.1 Quiz - Rmd specific 11.2 Back to Rmd: Last session 11.3 Taking full advantage of R 11.4 Exercise 11.5 Wrap-Up &amp; Further Resources 11.6 Thank you!", " Chapter 11 Taking full Advantage of R and R Markdown Happy Papaya Logo 11.1 Quiz - Rmd specific What do I need to do to make my text look like this? **_look like this_** I want to add a subtitle to my document, where might I do that? Add ‘subtitle: “A great subtitle”’ to the YAML header How do I generate a section header in my document? With the pound sign # Header Oh no, my header isn’t showing up right! What could have happened? There needs to be a space between the # and the header 11.1.1 Quiz - general R What package contains the functions select, filter &amp; mutate? dplyr (or tidyverse) Assume I have created some R project and I read a file with the following command - what does this tell you about the folder on my computer? greatdata &lt;- readr::read_csv(file = &quot;./data/somefile.CSV&quot;) The folder containing the R project contains a subfolder called “data” and in there is a CSV file called “somefile.csv”. 11.1.2 Quiz - general R I want to load a csv file into R with readRDS(). Why isn’t it working? The read commands are specific to the file format. readRDS() is for R files, read.csv() or readr::read_csv() are needed for csv files What do you know when you look at the command bigfive$extraversion? There is a data set called bigfive and we’re accessing a variable called extraversion 11.1.3 Quiz - general R What keywords for loops and conditionals do you remember? for, while, if, else, ifelse… I want to calculate a t-test on soul-belief (yes or no) and age in our seminar data. Why won’t this command work? t.test(v02_age, soul_dummy, data = seminar) When we have a grouping variable like soul_dummy, we need to use formula notation: v02_age ~ soul_dummy 11.2 Back to Rmd: Last session First off: the option of formatting the table of contents to float in html is toc_float: true Create Rmd: or File &gt; New File &gt; R Markdown YAML header defines format of the document as well as key info such as title, date, etc. Text formatting: italics with _italics_ bold with **bold** Unordered lists are created with - Ordered lists with 1., 2. … 11.2.1 Last session Code chunks are inserted via the menu Code &gt; Insert Chunk and should look like this: ```{r} # code goes here ``` keyboard shortcut ctrl + alt + i / command + option + i Chunk options can specify how to treat code, e.g. echo = FALSE only shows output but does not “echo” the actual code Indentation and spacing is very important! In the text, it is better to add more. In the YAML header, it may not be recognized properly with improper spacing 11.2.2 Including Links &amp; Images An image to R Markdown is essentially a link to an image file on your computer That’s why they share similar notation Web Link: [Google Link](www.google.com) Becomes: Google Link (clickable Link) Image: ![image description](C:/path/to/your/image.png) Different file formats, such as JPG, PNG, SVG or GIF When including an image, make sure you are using the right file path, image name &amp; file extension! So that… ![RMarkdown Logo](&quot;./img/rmd.png&quot;) …becomes… RMarkdown Logo 11.2.3 Inline Code To simply include variables or values in text, we can use inline code `r code ` Simply type one back tick ` and r - the program will auto complete the command Examples: The average sepal length of iris flowers is `r mean(iris$Sepal.Length)` \\(\\rightarrow\\) 5.843 11.3 Taking full advantage of R Conduct Analysis, e.g. an ANOVA Write about your analysis &amp; report results (with proper statistics) Choose and create an appropriate visualization, e.g. a boxplot 11.3.1 Walkthrough We will use the package palmerpenguins (install.packages(\"palmerpenguins\")) and see whether penguins from different islands have different body mass. library(palmerpenguins) # Test assumption of homoscedasticity car::leveneTest(aov(bill_length_mm ~ species, data = penguins)) # yay ## Levene&#39;s Test for Homogeneity of Variance (center = median) ## Df F value Pr(&gt;F) ## group 2 2.2425 0.1078 ## 339 # Run &amp; save ANOVA penguinmodel &lt;- aov(bill_length_mm ~ species, data = penguins) 11.3.2 Walkthrough # Run &amp; save post-hoc Tests TukeyHSD(penguinmodel) ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = bill_length_mm ~ species, data = penguins) ## ## $species ## diff lwr upr p adj ## Chinstrap-Adelie 10.042433 9.024859 11.0600064 0.0000000 ## Gentoo-Adelie 8.713487 7.867194 9.5597807 0.0000000 ## Gentoo-Chinstrap -1.328945 -2.381868 -0.2760231 0.0088993 For anova, we want to report the full statistics, a.k.a “full_result” from papaja::apa_print() library(papaja) apa_result &lt;- apa_print(penguinmodel)$full_result 11.3.3 Walkthrough Create a boxplot and add results right in the caption! library(ggplot2) ggplot(penguins, aes(x=species, y=bill_length_mm, color=species, fill=species), na.rm=T) + geom_boxplot(alpha = .7) + theme_apa() + theme(legend.position = &quot;none&quot;) + labs(x = &quot;Penguin Species&quot;, y = &quot;Bill Length (mm)&quot;, caption = latex2exp::TeX(unlist(apa_result))) + scale_color_brewer(palette = 5) + scale_fill_brewer(palette = 5) 11.3.4 Walkthrough Note that it is a little complex to include the result right in the caption ggplot2 cannot handle \\(\\LaTeX\\) notation so we need to use package latex2exp the TeX function from that package cannot handle the list-output from apa_print()$full_result so we need to “unlist” that Using RMarkdown, it is much easier to include the statistic right in the text with inline code: `r apa_print(penguinmodel)$full_result` \\(\\rightarrow\\) \\(F(2, 339) = 410.60\\), \\(p &lt; .001\\), \\(\\hat{\\eta}^2_G = .708\\), 90% CI \\([.669, .740]\\) 11.4 Exercise Create an R Markdown Document that includes the same type of analyses of variance with all steps that we have conducted before. Please use the penguins dataset from the palmerpenguins package and take “species” as the independet variable and “flipper_length_mm” as the dependent variable. 11.4.1 Exercise 11.4.1.1 Code Solution leveneTest(aov(flipper_length_mm ~ species, data = penguins)) penguinmodel2 &lt;- aov(bill_length_mm ~ species, data = penguins) posthoc &lt;- TukeyHSD(penguinmodel2) apa_result &lt;- apa_print(penguinmodel2)$full_result ggplot(penguins) + geom_boxplot(aes(x = species, y = flipper_length_mm, color = species, fill = species), alpha = .7, na.rm = TRUE) + theme_apa() + theme(legend.position = &quot;none&quot;) + labs(x = &quot;Penguin Species&quot;, y = &quot;Flipper Length (mm)&quot;) + scale_color_brewer(palette = 5) + scale_fill_brewer(palette = 5) 11.5 Wrap-Up &amp; Further Resources Wrap-Up Rmd offers many options for customization Analyses can be conducted and reported in the same document We can profit from many automatizations, e.g. chapter numbering Single values/ results can be reported with inline code Further Resources MarkdownGuide Another Markdown Cheatsheet ggsignif package example Bibliography and Citation 11.6 Thank you! Palmer Penguins "],["wrap-up.html", "Chapter 12 Wrap Up 12.1 Discussion of Self-Study Materials 12.2 Template HTML 12.3 Lessons from the useR! 12.4 “Pub” Quiz - Which function is missing? &amp; Logos 12.5 Outlook 12.6 Thank you!", " Chapter 12 Wrap Up 12.1 Discussion of Self-Study Materials Solutions to the quiz will be uploaded on ILIAS Specific questions, Fibonacci task, the template HTML and any additional questions Fibonacci Spiral 12.1.1 Fibonacci Task Thanks to whoever the rest of you copied! ;) Most of you used numeric(15) to create a variable with 15 zeros This is fair enough, but can lead to errors: If it contains numbers already, it is harder to detect calculation mistakes (0 is often a valid possibility) Better to use NAs to create a placeholder variable: rep(NA, X) rep(NA, 15) ## [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 12.1.2 Fibonacci Task n &lt;- 15 fibonacci &lt;- c(1, 1, rep(NA, n-2)) for(i in 3:n){ fibonacci[i] &lt;- fibonacci[i-1] + fibonacci[i-2] } fibonacci ## [1] 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 12.1.3 Alternative with while fibonacci = c(1, 1) while(length(fibonacci) &lt; 15){ new_num &lt;- fibonacci[length(fibonacci)] + fibonacci[length(fibonacci) - 1] fibonacci &lt;- c(fibonacci, new_num) } print(fibonacci) ## [1] 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 12.2 Template HTML Rmd Example Template ## ## ----- ## What the duck is this? ## ------ ## \\ ## \\ ## \\ ## __ ## /o \\ ## &lt;= | == ## |__| /=== ## | \\______/ = ## \\ ==== / ## \\__________/ [ab] 12.3 Lessons from the useR! Many people are working on many great projects. ohwhaley::say() ## ## ------ ## How are you? I&#39;m whaley good! ## ------ ## \\ ## \\ ## \\ ## .-&#39; ## &#39;--./ / _.---. ## &#39;-, (__..-` \\ ## \\ . | ## `,.__. ,__.--/ ## &#39;._/_.&#39;___.-` R can be hard. … but it’s worth it. Data Analysis is important in so many fields. R is really fun! 12.3.1 Work with a scientifically sound AI cs50.ai CS50.ai example chat 12.4 “Pub” Quiz - Which function is missing? &amp; Logos Work in groups of 2-3 and submit your answers via kahoot. You will see some code snippets where the function name is missing - which is it? Afterwards you need to judge which package logo is the right way round! Big Thanks to Deepansh Khurana for providing materials and inspiration! 12.5 Outlook Keep teaching yourself R - you have a lot of great resources! # Keep finding cool features (like the emphatic package) iris |&gt; group_by(Species) |&gt; summarize(Mean_Sepal_Length = mean(Sepal.Length)) |&gt; emphatic::hl(c(&quot;purple&quot;, &quot;violet&quot;, &quot;hotpink&quot;)) Species Mean_Sepal_Length1 setosa 5.0062 versicolor 5.9363 virginica 6.588 12.5.1 Anything left unclear? Hex Logos Wrap-Up R helps you to get an overview of your data R gives your tools for data analysis &amp; visualization R lets you create reports, presentations, app dashboards… Keep R weird! Do silly things in R! Use the slides from this course as templates to learn from. Further Resources StatLearning Shiny App (Uni Leiden) GitHub: Ohwhaley package YouTube: useR! conference 12.6 Thank you! Hadley Wickham GIFfrom Hadley GIFs "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
